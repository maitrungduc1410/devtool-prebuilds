{
  "version": 3,
  "sources": ["../../../../../../../../devtools/projects/protocol/src/lib/messages.ts", "../../../../../../../../devtools/projects/protocol/src/lib/message-bus.ts", "../../../../../../../../devtools/projects/protocol/src/lib/priority-aware-message-bus.ts", "../../../../../../../../devtools/projects/protocol/src/public-api.ts", "../../../../../../../../devtools/projects/protocol/index.ts", "../../../../../../../../devtools/projects/shell-chrome/src/app/chrome-message-bus.ts", "../../../../../../../../devtools/projects/shell-chrome/src/app/same-page-message-bus.ts", "../../../../../../../../devtools/projects/shell-chrome/src/app/content-script.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewEncapsulation} from '@angular/core';\n\nexport interface DirectiveType {\n  name: string;\n  id: number;\n}\n\nexport interface ComponentType {\n  name: string;\n  isElement: boolean;\n  id: number;\n}\n\nexport interface DevToolsNode<DirType = DirectiveType, CmpType = ComponentType> {\n  element: string;\n  directives: DirType[];\n  component: CmpType|null;\n  children: DevToolsNode<DirType, CmpType>[];\n  nativeElement?: Node;\n}\n\nexport enum PropType {\n  Number,\n  String,\n  Null,\n  Undefined,\n  Symbol,\n  HTMLNode,\n  Boolean,\n  BigInt,\n  Function,\n  Object,\n  Date,\n  Array,\n  Unknown,\n}\n\nexport interface Descriptor {\n  expandable: boolean;\n  value?: any;\n  editable: boolean;\n  type: PropType;\n  preview: string;\n}\n\nexport interface DirectivesProperties {\n  [name: string]: Properties;\n}\n\nexport interface DirectiveMetadata {\n  inputs: {[name: string]: string};\n  outputs: {[name: string]: string};\n  encapsulation: ViewEncapsulation;\n  onPush: boolean;\n}\n\nexport interface Properties {\n  props: {[name: string]: Descriptor};\n  metadata?: DirectiveMetadata;\n}\n\nexport type ElementPosition = number[];\n\nexport interface DirectivePosition {\n  element: ElementPosition;\n  directive?: number;\n}\n\nexport interface NestedProp {\n  name: string|number;\n  children: NestedProp[];\n}\n\nexport interface ComponentExplorerViewProperties {\n  [directive: string]: NestedProp[];\n}\n\nexport enum PropertyQueryTypes {\n  All,\n  Specified,\n}\n\nexport interface AllPropertiesQuery {\n  type: PropertyQueryTypes.All;\n}\n\nexport interface SelectedPropertiesQuery {\n  type: PropertyQueryTypes.Specified;\n  properties: ComponentExplorerViewProperties;\n}\n\nexport type PropertyQuery = AllPropertiesQuery|SelectedPropertiesQuery;\n\nexport interface ComponentExplorerViewQuery {\n  selectedElement: ElementPosition;\n  propertyQuery: PropertyQuery;\n}\n\nexport interface ComponentExplorerView {\n  forest: DevToolsNode[];\n  properties?: DirectivesProperties;\n}\n\nexport interface LifecycleProfile {\n  ngOnInit?: number;\n  ngOnDestroy?: number;\n  ngOnChanges?: number;\n  ngDoCheck?: number;\n  ngAfterContentInit?: number;\n  ngAfterContentChecked?: number;\n  ngAfterViewInit?: number;\n  ngAfterViewChecked?: number;\n}\n\nexport interface OutputProfile {\n  [outputName: string]: number;\n}\n\nexport interface DirectiveProfile {\n  name: string;\n  isElement: boolean;\n  isComponent: boolean;\n  lifecycle: LifecycleProfile;\n  outputs: OutputProfile;\n  changeDetection?: number;\n}\n\nexport interface ElementProfile {\n  directives: DirectiveProfile[];\n  children: ElementProfile[];\n}\n\nexport interface ProfilerFrame {\n  source: string;\n  duration: number;\n  directives: ElementProfile[];\n}\n\nexport interface UpdatedStateData {\n  directiveId: DirectivePosition;\n  keyPath: string[];\n  newValue: any;\n}\n\nexport interface Route {\n  name: string;\n  hash: string|null;\n  path: string;\n  specificity: string|null;\n  handler: string;\n  data: any;\n  children?: Array<Route>;\n  isAux: boolean;\n}\n\nexport type Topic = keyof Events;\n\nexport interface Events {\n  handshake: () => void;\n  shutdown: () => void;\n  queryNgAvailability: () => void;\n  ngAvailability:\n      (config: {version: string|undefined|boolean; devMode: boolean; ivy: boolean}) => void;\n\n  inspectorStart: () => void;\n  inspectorEnd: () => void;\n\n  getNestedProperties: (position: DirectivePosition, path: string[]) => void;\n  nestedProperties: (position: DirectivePosition, data: Properties, path: string[]) => void;\n\n  setSelectedComponent: (position: ElementPosition) => void;\n  getRoutes: () => void;\n  updateRouterTree: (routes: Route[]) => void;\n\n  componentTreeDirty: () => void;\n  getLatestComponentExplorerView: (query?: ComponentExplorerViewQuery) => void;\n  latestComponentExplorerView: (view: ComponentExplorerView) => void;\n\n  updateState: (value: UpdatedStateData) => void;\n\n  startProfiling: () => void;\n  stopProfiling: () => void;\n  sendProfilerChunk: (results: ProfilerFrame) => void;\n  profilerResults: (results: ProfilerFrame) => void;\n\n  createHighlightOverlay: (position: ElementPosition) => void;\n  removeHighlightOverlay: () => void;\n\n  highlightComponent: (id: number) => void;\n  selectComponent: (id: number) => void;\n  removeComponentHighlight: () => void;\n\n  enableTimingAPI: () => void;\n  disableTimingAPI: () => void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type Parameters<F> = F extends(...args: infer T) => any ? T : never;\n\nexport abstract class MessageBus<T> {\n  abstract on<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract once<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract emit<E extends keyof T>(topic: E, args?: Parameters<T[E]>): boolean;\n  abstract destroy(): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MessageBus} from './message-bus';\nimport {Events, Topic} from './messages';\n\ntype ThrottleTopicDuration = {\n  [method in Topic]?: number;\n};\n\ntype ThrottledTopics = {\n  [method in Topic]?: boolean;\n};\n\ntype TopicsInProgress = {\n  [method in Topic]?: boolean;\n};\n\nconst THROTTLE_METHODS: ThrottleTopicDuration = {\n  getLatestComponentExplorerView: 100,\n};\n\ntype TopicBlockSequence = {\n  [method in Topic]?: Topic[];\n};\n\n// We can't refresh the view until we've received\n// a response with the latest nested properties.\nconst TOPIC_BLOCK_SEQUENCE: TopicBlockSequence = {\n  getLatestComponentExplorerView: ['getNestedProperties'],\n};\n\ntype TopicSequence = {\n  [method in Topic]?: Topic;\n};\n\nconst TOPIC_RESPONSE: TopicSequence = {\n  getNestedProperties: 'nestedProperties',\n};\n\nconst TOPIC_REQUEST: TopicSequence = {\n  nestedProperties: 'getNestedProperties',\n};\n\nexport class PriorityAwareMessageBus extends MessageBus<Events> {\n  private _throttled: ThrottledTopics = {};\n  private _inProgress: TopicsInProgress = {};\n\n  constructor(\n      private _bus: MessageBus<Events>, private _setTimeout: typeof setTimeout = setTimeout) {\n    super();\n  }\n\n  override on<E extends Topic>(topic: E, cb: Events[E]): void {\n    const self = this;\n    return this._bus.on(topic, function(): void {\n      cb.apply(this, arguments);\n      self._afterMessage(topic);\n    });\n  }\n\n  override once<E extends Topic>(topic: E, cb: Events[E]): void {\n    const self = this;\n    return this._bus.once(topic, function(): void {\n      cb.apply(this, arguments);\n      self._afterMessage(topic);\n    });\n  }\n\n  override emit<E extends Topic>(topic: E, args?: Parameters<Events[E]>): boolean {\n    if (this._throttled[topic]) {\n      return false;\n    }\n    if (TOPIC_RESPONSE[topic]) {\n      this._inProgress[topic] = true;\n    }\n    const blockedBy = TOPIC_BLOCK_SEQUENCE[topic];\n    if (blockedBy) {\n      // The source code here is safe.\n      // TypeScript type inference ignores the null check here.\n      // tslint:disable-next-line: no-non-null-assertion\n      for (const blocker of blockedBy!) {\n        if (this._inProgress[blocker]) {\n          return false;\n        }\n      }\n    }\n    if (THROTTLE_METHODS[topic]) {\n      this._throttled[topic] = true;\n      this._setTimeout(() => (this._throttled[topic] = false), THROTTLE_METHODS[topic]);\n    }\n    return this._bus.emit(topic, args);\n  }\n\n  override destroy(): void {\n    this._bus.destroy();\n  }\n\n  private _afterMessage(topic: Topic): void {\n    const request = TOPIC_REQUEST[topic];\n    if (!request) {\n      return;\n    }\n    if (this._inProgress[request]) {\n      this._inProgress[request] = false;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*\n * Public API Surface of protocol\n */\n\nexport * from './lib/messages';\nexport * from './lib/message-bus';\nexport * from './lib/priority-aware-message-bus';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './src/public-api';\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"chrome\"/>\n\nimport {Events, MessageBus, Parameters} from 'protocol';\n\ninterface ChromeMessage<T, K extends keyof T> {\n  topic: K;\n  args: Parameters<T[K]>;\n}\n\ntype AnyEventCallback<Ev> = <E extends keyof Ev>(topic: E, args: Parameters<Ev[E]>) => void;\n\nexport class ChromeMessageBus extends MessageBus<Events> {\n  private _disconnected = false;\n  private _listeners: any[] = [];\n\n  constructor(private _port: chrome.runtime.Port) {\n    super();\n\n    _port.onDisconnect.addListener(() => {\n      // console.log('Disconnected the port');\n      this._disconnected = true;\n    });\n  }\n\n  onAny(cb: AnyEventCallback<Events>): () => void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>): void => {\n      cb(msg.topic, msg.args);\n    };\n    this._port.onMessage.addListener(listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      this._port.onMessage.removeListener(listener);\n    };\n  }\n\n  on<E extends keyof Events>(topic: E, cb: Events[E]): () => void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>): void => {\n      if (msg.topic === topic) {\n        cb.apply(null, msg.args);\n      }\n    };\n    this._port.onMessage.addListener(listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      this._port.onMessage.removeListener(listener);\n    };\n  }\n\n  once<E extends keyof Events>(topic: E, cb: Events[E]): void {\n    const listener = (msg: ChromeMessage<Events, keyof Events>) => {\n      if (msg.topic === topic) {\n        cb.apply(null, msg.args);\n        this._port.onMessage.removeListener(listener);\n      }\n    };\n    this._port.onMessage.addListener(listener);\n  }\n\n  emit<E extends keyof Events>(topic: E, args?: Parameters<Events[E]>): boolean {\n    if (this._disconnected) {\n      return false;\n    }\n    this._port.postMessage({\n      topic,\n      args,\n    });\n    return true;\n  }\n\n  destroy(): void {\n    this._listeners.forEach((l) => window.removeEventListener('message', l));\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Events, MessageBus, Parameters} from 'protocol';\n\ntype AnyEventCallback<Ev> = <E extends keyof Ev>(topic: E, args: Parameters<Ev[E]>) => void;\n\nexport class SamePageMessageBus extends MessageBus<Events> {\n  private _listeners: any[] = [];\n\n  constructor(private _source: string, private _destination: string) {\n    super();\n  }\n\n  onAny(cb: AnyEventCallback<Events>): () => void {\n    const listener = (e: MessageEvent): void => {\n      if (e.source !== window || !e.data || !e.data.topic || e.data.source !== this._destination) {\n        return;\n      }\n      cb(e.data.topic, e.data.args);\n    };\n    window.addEventListener('message', listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      window.removeEventListener('message', listener);\n    };\n  }\n\n  on<E extends keyof Events>(topic: E, cb: Events[E]): () => void {\n    const listener = (e: MessageEvent): void => {\n      if (e.source !== window || !e.data || e.data.source !== this._destination || !e.data.topic) {\n        return;\n      }\n      if (e.data.topic === topic) {\n        cb.apply(null, e.data.args);\n      }\n    };\n    window.addEventListener('message', listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      window.removeEventListener('message', listener);\n    };\n  }\n\n  once<E extends keyof Events>(topic: E, cb: Events[E]): void {\n    const listener = (e: MessageEvent): void => {\n      if (e.source !== window || !e.data || e.data.source !== this._destination || !e.data.topic) {\n        return;\n      }\n      if (e.data.topic === topic) {\n        cb.apply(null, e.data.args);\n      }\n      window.removeEventListener('message', listener);\n    };\n    window.addEventListener('message', listener);\n  }\n\n  emit<E extends keyof Events>(topic: E, args?: Parameters<Events[E]>): boolean {\n    window.postMessage(\n        {\n          source: this._source,\n          topic,\n          args,\n        },\n        '*');\n    return true;\n  }\n\n  destroy(): void {\n    this._listeners.forEach((l) => window.removeEventListener('message', l));\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChromeMessageBus} from './chrome-message-bus';\nimport {SamePageMessageBus} from './same-page-message-bus';\n\nexport const main = () => {\n  let backgroundDisconnected = false;\n  let backendInitialized = false;\n\n  // console.log('Content script executing', (window as any));\n\n  const port = chrome.runtime.connect({\n    name: 'content-script',\n  });\n\n  const handleDisconnect = (): void => {\n    // console.log('Background disconnected', new Date());\n    localMessageBus.emit('shutdown');\n    localMessageBus.destroy();\n    chromeMessageBus.destroy();\n    backgroundDisconnected = true;\n  };\n\n  port.onDisconnect.addListener(handleDisconnect);\n\n  const localMessageBus =\n      new SamePageMessageBus('angular-devtools-content-script', 'angular-devtools-backend');\n  const chromeMessageBus = new ChromeMessageBus(port);\n\n  const handshakeWithBackend = (): void => {\n    localMessageBus.emit('handshake');\n  };\n\n  chromeMessageBus.onAny((topic, args) => {\n    localMessageBus.emit(topic, args);\n  });\n\n  localMessageBus.onAny((topic, args) => {\n    backendInitialized = true;\n    chromeMessageBus.emit(topic, args);\n  });\n\n  if (!backendInitialized) {\n    // tslint:disable-next-line:no-console\n    console.log('Attempting initialization', new Date());\n\n    const retry = () => {\n      if (backendInitialized || backgroundDisconnected) {\n        return;\n      }\n      handshakeWithBackend();\n      setTimeout(retry, 500);\n    };\n    retry();\n  }\n};\n\n// expose to use as callback for chrome.tabs.executeScript in background.ts\nglobalThis.main = main;\n"],
  "mappings": "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",
  "names": []
}
