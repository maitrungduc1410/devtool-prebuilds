{
  "version": 3,
  "sources": ["../../../../../../../../devtools/projects/shell-chrome/src/app/background.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"chrome\"/>\n\nimport {AngularDetection} from './ng-validate';\n\n// Electron does not expose browserAction object,\n// Use empty calls as fallback if they are not defined.\nconst browserAction = chrome.browserAction || {setIcon: () => {}, setPopup: () => {}};\n\n// By default use the black and white icon.\n// Replace it only when we detect an Angular app.\nbrowserAction.setIcon({\n  path: {\n    16: `assets/icon-bw16.png`,\n    48: `assets/icon-bw48.png`,\n    128: `assets/icon-bw128.png`,\n  },\n});\n\nconst ports: {\n  [tab: string]:\n      |{\n        'content-script': chrome.runtime.Port|null;\n        devtools: chrome.runtime.Port|null;\n      }|undefined;\n} = {};\n\nchrome.runtime.onConnect.addListener((port) => {\n  let tab: string|null = null;\n  let name: string|null = null;\n  // tslint:disable-next-line:no-console\n  console.log('Connection event in the background script');\n\n  if (isNumeric(port.name)) {\n    tab = port.name;\n\n    // tslint:disable-next-line:no-console\n    console.log('Angular devtools connected, injecting the content script', port.name, ports[tab]);\n\n    name = 'devtools';\n    installContentScript(parseInt(port.name, 10));\n  } else {\n    if (!port.sender || !port.sender.tab) {\n      // tslint:disable-next-line:no-console\n      console.error('Unable to access the port sender and sender tab');\n\n      return;\n    }\n    if (port.sender.tab.id === undefined) {\n      // tslint:disable-next-line:no-console\n      console.error('Sender tab id is undefined');\n\n      return;\n    }\n\n    // tslint:disable-next-line:no-console\n    console.log('Content script connected', port.sender.tab.id);\n    tab = port.sender.tab.id.toString();\n    name = 'content-script';\n  }\n\n  let portsTab = ports[tab];\n  if (!portsTab) {\n    // tslint:disable-next-line:no-console\n    console.log('Creating a tab port');\n\n    portsTab = ports[tab] = {\n      devtools: null,\n      'content-script': null,\n    };\n  }\n\n  portsTab[name] = port;\n\n  if (portsTab.devtools && portsTab['content-script']) {\n    doublePipe(portsTab.devtools, portsTab['content-script'], tab);\n  }\n});\n\nconst isNumeric = (str: string): boolean => {\n  return +str + '' === str;\n};\n\nconst installContentScript = (tabId: number) => {\n  // tslint:disable-next-line:no-console\n  console.log('Installing the content-script');\n\n  // We first inject the content-script and after that\n  // invoke the global that it exposes.\n  chrome.tabs.executeScript(tabId, {file: 'app/content_script_bundle.js'}, (result) => {\n    chrome.tabs.executeScript(tabId, {\n      code: 'globalThis.main()',\n    });\n  });\n};\n\nconst doublePipe =\n    (devtoolsPort: chrome.runtime.Port|null, contentScriptPort: chrome.runtime.Port,\n     tab: string) => {\n      if (devtoolsPort === null) {\n        console.warn('DevTools port is equal to null');\n        return;\n      }\n\n      // tslint:disable-next-line:no-console\n      console.log('Creating two-way communication channel', Date.now(), ports);\n\n      const onDevToolsMessage = (message: chrome.runtime.Port) => {\n        contentScriptPort.postMessage(message);\n      };\n      devtoolsPort.onMessage.addListener(onDevToolsMessage);\n\n      const onContentScriptMessage = (message: chrome.runtime.Port) => {\n        devtoolsPort.postMessage(message);\n      };\n      contentScriptPort.onMessage.addListener(onContentScriptMessage);\n\n      const shutdown = (source: string) => {\n        // tslint:disable-next-line:no-console\n        console.log('Disconnecting', source);\n\n        devtoolsPort.onMessage.removeListener(onDevToolsMessage);\n        contentScriptPort.onMessage.removeListener(onContentScriptMessage);\n        devtoolsPort.disconnect();\n        contentScriptPort.disconnect();\n        ports[tab] = undefined;\n      };\n      devtoolsPort.onDisconnect.addListener(shutdown.bind(null, 'devtools'));\n      contentScriptPort.onDisconnect.addListener(shutdown.bind(null, 'content-script'));\n    };\n\nconst getPopUpName = (ng: AngularDetection) => {\n  if (!ng.isAngular) {\n    return 'not-angular.html';\n  }\n  if (!ng.isIvy || !ng.isSupportedAngularVersion) {\n    return 'unsupported.html';\n  }\n  if (!ng.isDebugMode) {\n    return 'production.html';\n  }\n  return 'supported.html';\n};\n\nchrome.runtime.onMessage.addListener((req, sender) => {\n  if (!req.isAngularDevTools) {\n    return;\n  }\n  if (sender && sender.tab) {\n    browserAction.setPopup({\n      tabId: sender.tab.id,\n      popup: `popups/${getPopUpName(req)}`,\n    });\n  }\n  if (sender && sender.tab && req.isAngular) {\n    browserAction.setIcon({\n      tabId: sender.tab.id,\n      path: {\n        16: `assets/icon16.png`,\n        48: `assets/icon48.png`,\n        128: `assets/icon128.png`,\n      },\n    });\n  }\n});\n"],
  "mappings": ";;AAAA,AAcA,MAAM,gBAAgB,OAAO,iBAAiB,EAAC,SAAS,MAAK;KAAK,UAAU,MAAK;;AAIjF,gBAAc,QAAQ;IACpB,MAAM;MACJ,IAAI;MACJ,IAAI;MACJ,KAAK;;;AAIT,MAAM,QAMF;AAEJ,SAAO,QAAQ,UAAU,YAAY,CAAC,SAAQ;AAC5C,QAAI,MAAmB;AACvB,QAAI,OAAoB;AAExB,YAAQ,IAAI;AAEZ,QAAI,UAAU,KAAK,OAAO;AACxB,YAAM,KAAK;AAGX,cAAQ,IAAI,4DAA4D,KAAK,MAAM,MAAM;AAEzF,aAAO;AACP,2BAAqB,SAAS,KAAK,MAAM;WACpC;AACL,UAAI,CAAC,KAAK,UAAU,CAAC,KAAK,OAAO,KAAK;AAEpC,gBAAQ,MAAM;AAEd;;AAEF,UAAI,KAAK,OAAO,IAAI,OAAO,QAAW;AAEpC,gBAAQ,MAAM;AAEd;;AAIF,cAAQ,IAAI,4BAA4B,KAAK,OAAO,IAAI;AACxD,YAAM,KAAK,OAAO,IAAI,GAAG;AACzB,aAAO;;AAGT,QAAI,WAAW,MAAM;AACrB,QAAI,CAAC,UAAU;AAEb,cAAQ,IAAI;AAEZ,iBAAW,MAAM,OAAO;QACtB,UAAU;QACV,kBAAkB;;;AAItB,aAAS,QAAQ;AAEjB,QAAI,SAAS,YAAY,SAAS,mBAAmB;AACnD,iBAAW,SAAS,UAAU,SAAS,mBAAmB;;;AAI9D,MAAM,YAAY,CAAC,QAAwB;AACzC,WAAO,CAAC,MAAM,OAAO;;AAGvB,MAAM,uBAAuB,CAAC,UAAiB;AAE7C,YAAQ,IAAI;AAIZ,WAAO,KAAK,cAAc,OAAO,EAAC,MAAM,kCAAiC,CAAC,WAAU;AAClF,aAAO,KAAK,cAAc,OAAO;QAC/B,MAAM;;;;AAKZ,MAAM,aACF,CAAC,cAAwC,mBACxC,QAAe;AACd,QAAI,iBAAiB,MAAM;AACzB,cAAQ,KAAK;AACb;;AAIF,YAAQ,IAAI,0CAA0C,KAAK,OAAO;AAElE,UAAM,oBAAoB,CAAC,YAAgC;AACzD,wBAAkB,YAAY;;AAEhC,iBAAa,UAAU,YAAY;AAEnC,UAAM,yBAAyB,CAAC,YAAgC;AAC9D,mBAAa,YAAY;;AAE3B,sBAAkB,UAAU,YAAY;AAExC,UAAM,WAAW,CAAC,WAAkB;AAElC,cAAQ,IAAI,iBAAiB;AAE7B,mBAAa,UAAU,eAAe;AACtC,wBAAkB,UAAU,eAAe;AAC3C,mBAAa;AACb,wBAAkB;AAClB,YAAM,OAAO;;AAEf,iBAAa,aAAa,YAAY,SAAS,KAAK,MAAM;AAC1D,sBAAkB,aAAa,YAAY,SAAS,KAAK,MAAM;;AAGrE,MAAM,eAAe,CAAC,OAAwB;AAC5C,QAAI,CAAC,GAAG,WAAW;AACjB,aAAO;;AAET,QAAI,CAAC,GAAG,SAAS,CAAC,GAAG,2BAA2B;AAC9C,aAAO;;AAET,QAAI,CAAC,GAAG,aAAa;AACnB,aAAO;;AAET,WAAO;;AAGT,SAAO,QAAQ,UAAU,YAAY,CAAC,KAAK,WAAU;AACnD,QAAI,CAAC,IAAI,mBAAmB;AAC1B;;AAEF,QAAI,UAAU,OAAO,KAAK;AACxB,oBAAc,SAAS;QACrB,OAAO,OAAO,IAAI;QAClB,OAAO,UAAU,aAAa;;;AAGlC,QAAI,UAAU,OAAO,OAAO,IAAI,WAAW;AACzC,oBAAc,QAAQ;QACpB,OAAO,OAAO,IAAI;QAClB,MAAM;UACJ,IAAI;UACJ,IAAI;UACJ,KAAK;;;;;",
  "names": []
}
